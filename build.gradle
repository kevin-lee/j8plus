apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'jacoco'
apply plugin: 'com.github.kt3k.coveralls'

buildscript {
  repositories {
    jcenter()
    mavenLocal()
    mavenCentral()
    maven {
      url  "http://dl.bintray.com/kt3k/gradle-plugins"
    }
  }
  dependencies {
    classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.2'
    classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.4.0'
  }
}

configurations.all {
  resolutionStrategy {
    force 'org.ow2.asm:asm:5.0.3'
    forcedModules = [ 'org.ow2.asm:asm:5.0.3' ]
  }
}

jacocoTestReport {
  reports {
    xml.enabled = true // coveralls plugin depends on xml format report
    html.enabled = true
  }
}

//plugins {
//  id "com.jfrog.bintray" version "1.1"
//}

description = "j8plus"

// WARNING!!! Check out build.sbt
version = '0.0.14'

//task wrapper(type: Wrapper) {
//    gradleVersion = '2.3'
//}

def projectSourceEncoding = 'UTF-8'
def projectJavaVersion = '1.8'
def junitVersion = '4.11'
def testosteroneVersion = '0.0.6'

sourceCompatibility = projectJavaVersion
targetCompatibility = projectJavaVersion

compileJava.options.encoding = projectSourceEncoding

project.version = version
project.group = 'cc.kevinlee'

repositories {
  mavenLocal()
  mavenCentral()
  maven {
    url 'http://nexus.lckymn.com/content/repositories/kevin-public-releases'
  }
  maven {
    url 'http://nexus.lckymn.com/content/repositories/kevin-public-snapshots'
  }
  maven {
    url  "http://dl.bintray.com/kevinlee/maven"
  }
}

uploadArchives {
  repositories {
    mavenDeployer {
//      repository(url: 'http://nexus.lckymn.com/content/repositories/kevin-public-releases') {
//        authentication(userName: hasProperty('mavenDeployUser') ? mavenDeployUser : "", password: hasProperty('mavenDeployPassword') ? mavenDeployPassword : "")
//      }
      snapshotRepository(url: 'http://nexus.lckymn.com/content/repositories/kevin-public-snapshots') {
        authentication(userName: hasProperty('mavenDeployUser') ? mavenDeployUser : "", password: hasProperty('mavenDeployPassword') ? mavenDeployPassword : "")
      }
    }
  }
}

tasks.withType(JavaCompile) {
  options.encoding = projectSourceEncoding
}

task sourcesJar(type: Jar, dependsOn: classes) {
  classifier = 'sources'
  from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
  classifier = 'javadoc'
  from javadoc.destinationDir
}

artifacts {
  archives sourcesJar
  archives javadocJar
}

dependencies {
  testCompile "junit:junit:${junitVersion}",
      "cc.kevinlee:test0ster1:${testosteroneVersion}",
      "org.assertj:assertj-core:3.0.0",
      "org.mockito:mockito-all:1.10.19",
      "org.elixirian:kommonlee-test:0.0.18-SNAPSHOT"
}

jar {
  manifest {
    attributes 'Implementation-Title': 'J8+',
        'Implementation-Version': version
  }
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      from components.java

      artifact sourcesJar
      artifact javadocJar
    }
  }
}

bintray {
  user = project.hasProperty('bintrayUser') ? bintrayUser : ""
  key = project.hasProperty('bintrayPass') ? bintrayPass : ""

//        configurations = ['deployables'] //When uploading configuration files
  publications = ['mavenJava']

  dryRun = false //Whether to run this as dry-run, without deploying
  publish = true //If version should be auto published after an upload
  pkg {
    repo = 'maven'
    name = 'j8plus'
    desc = 'Library containing useful tools for Java 8'
    websiteUrl = 'https://github.com/Kevin-Lee/j8plus'
    issueTrackerUrl = 'https://github.com/Kevin-Lee/j8plus/issues'
    vcsUrl = 'https://github.com/Kevin-Lee/j8plus.git'
    licenses = ['Apache-2.0']
    labels = ['Java', 'Java8', 'Functional', 'Trampoline']
    publicDownloadNumbers = true

    //Optional version descriptor
    version {
      name = project.version //Bintray logical version name
//      desc = 'optional, version-specific description'
//                released  = 'optional, date of the version release' //2 possible values: date in the format of 'yyyy-MM-dd'T'HH:mm:ss.SSSZZ' OR a java.util.Date instance
//                vcsTag = '1.3.0'
//                attributes = ['gradle-plugin': 'com.use.less:com.use.less.gradle:gradle-useless-plugin'] //Optional version-level attributes
//                gpg {
//                    sign = true //Determines whether to GPG sign the files. The default is false
//                    passphrase = 'passphrase' //Optional. The passphrase for GPG signing'
//                }
//      mavenCentralSync {
//        sync = false //Optional (true by default). Determines whether to sync the version to Maven Central.
//        user = 'userToken' //OSS user token
//        password = 'paasword' //OSS user password
//        close = '1' //Optional property. By default the staging repository is closed and artifacts are released to Maven Central. You can optionally turn this behaviour off (by puting 0 as value) and release the version manually.
//      }
    }
  }
}
