"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[39],{3905:(e,t,r)=>{r.d(t,{Zo:()=>s,kt:()=>d});var n=r(7294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var p=n.createContext({}),h=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},s=function(e){var t=h(e.components);return n.createElement(p.Provider,{value:t},e.children)},g="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,a=e.originalType,p=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),g=h(r),m=i,d=g["".concat(p,".").concat(m)]||g[m]||u[m]||a;return r?n.createElement(d,l(l({ref:t},s),{},{components:r})):n.createElement(d,l({ref:t},s))}));function d(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=r.length,l=new Array(a);l[0]=m;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o[g]="string"==typeof e?e:i,l[1]=o;for(var h=2;h<a;h++)l[h]=r[h];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},935:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>g,frontMatter:()=>a,metadata:()=>o,toc:()=>h});var n=r(7462),i=(r(7294),r(3905));const a={id:"either",title:"Either - Turn Your Partial Function into a Total Function",sidebar_label:"Either"},l=void 0,o={unversionedId:"types/either",id:"types/either",title:"Either - Turn Your Partial Function into a Total Function",description:"Why Either",source:"@site/docs/types/either.md",sourceDirName:"types",slug:"/types/either",permalink:"/docs/types/either",draft:!1,tags:[],version:"current",frontMatter:{id:"either",title:"Either - Turn Your Partial Function into a Total Function",sidebar_label:"Either"},sidebar:"j8PlusSidebar",previous:{title:"Maybe",permalink:"/docs/types/maybe"},next:{title:"Runner (WIP)",permalink:"/docs/types/runner"}},p={},h=[{value:"Why <code>Either</code>",id:"why-either",level:2},{value:"Create",id:"create",level:2},{value:"Either.right to contain the result",id:"eitherright-to-contain-the-result",level:3},{value:"Either.right to contain the error",id:"eitherright-to-contain-the-error",level:3},{value:"<code>Either</code> from <code>Optional</code>",id:"either-from-optional",level:3},{value:"<code>Either</code> from <code>Maybe</code>",id:"either-from-maybe",level:3},{value:"Transform",id:"transform",level:2},{value:"<code>Either.map</code>",id:"eithermap",level:3},{value:"<code>Either.flatMap</code>",id:"eitherflatmap",level:3},{value:"<code>Either.leftMap</code>",id:"eitherleftmap",level:3},{value:"<code>Either.leftFlatMap</code>",id:"eitherleftflatmap",level:3},{value:"<code>Either.swap</code>",id:"eitherswap",level:3},{value:"Get the Value",id:"get-the-value",level:2},{value:"<code>Either.fold</code>",id:"eitherfold",level:3},{value:"<code>Either.getOrElse</code>",id:"eithergetorelse",level:3},{value:"<code>Either.getLeftOrElse</code>",id:"eithergetleftorelse",level:3},{value:"Use Value",id:"use-value",level:2},{value:"<code>Either.forEach</code>",id:"eitherforeach",level:3},{value:"<code>Either.forEachLeft</code>",id:"eitherforeachleft",level:3},{value:"Check Value in Either",id:"check-value-in-either",level:2},{value:"<code>Either.isRight</code>",id:"eitherisright",level:3},{value:"<code>Either.isLeft</code>",id:"eitherisleft",level:3},{value:"Example",id:"example",level:2}],s={toc:h};function g(e){let{components:t,...r}=e;return(0,i.kt)("wrapper",(0,n.Z)({},s,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"why-either"},"Why ",(0,i.kt)("inlineCode",{parentName:"h2"},"Either")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Either")," can turn a partial function into a total function."),(0,i.kt)("p",null,"When your function (or method) is a partial function meaning that it may not have a return value for some inputs, your code becomes hard to understand and maintain because it may throw an ",(0,i.kt)("inlineCode",{parentName:"p"},"Exception")," when there's no corresponding result for a such input. Throwing an ",(0,i.kt)("inlineCode",{parentName:"p"},"Exception")," means that there might be any number exceptions that can be thrown from the function, and to see what might be thrown, you have to check the implementation details. "),(0,i.kt)("p",null,"To make it a total function so that it always has the output for the given input, there can be multiple ways but an easy and recommended way is using ",(0,i.kt)("inlineCode",{parentName:"p"},"Either"),"."),(0,i.kt)("admonition",{title:"NOTE",type:"caution"},(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("inlineCode",{parentName:"p"},"Either")," is right-biased meaning that the most well-known combinators on ",(0,i.kt)("inlineCode",{parentName:"p"},"Either")," (e.g. ",(0,i.kt)("inlineCode",{parentName:"p"},"map"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"flatMap"),", etc.) are by default for the ",(0,i.kt)("inlineCode",{parentName:"p"},"Right")," value. If you want to manipulate the left one, you need to use the combinators for ",(0,i.kt)("inlineCode",{parentName:"p"},"Left")," which are usually prefixed with ",(0,i.kt)("inlineCode",{parentName:"p"},"left")," (e.g. ",(0,i.kt)("inlineCode",{parentName:"p"},"leftMap"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"leftFlatMap"),", etc.).  ")),(0,i.kt)("h2",{id:"create"},"Create"),(0,i.kt)("h3",{id:"eitherright-to-contain-the-result"},"Either.right to contain the result"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"import j8plus.types.Either;\n\nEither.<String, Integer>right(1);\n// Either<String, Integer> = Right(1)\n")),(0,i.kt)("h3",{id:"eitherright-to-contain-the-error"},"Either.right to contain the error"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'import j8plus.types.Either;\n\nEither.<String, Integer>left("Error message");\n// Either<String, Integer> = Left("Error message")\n')),(0,i.kt)("h3",{id:"either-from-optional"},(0,i.kt)("inlineCode",{parentName:"h3"},"Either")," from ",(0,i.kt)("inlineCode",{parentName:"h3"},"Optional")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'import j8plus.types.Either;\n\nfinal Optional<Integer> num = Optional.ofNullable(1);\nEither.fromOptional(num, () -> "No number found");\n// Either<String, Integer> = Right(1)\n\nfinal Optional<Integer> noNum = Optional.empty();\nEither.fromOptional(noNum, () -> "No number found");\n// Either<String, Integer> = Left("No number found")\n')),(0,i.kt)("h3",{id:"either-from-maybe"},(0,i.kt)("inlineCode",{parentName:"h3"},"Either")," from ",(0,i.kt)("inlineCode",{parentName:"h3"},"Maybe")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'import j8plus.types.Maybe;\nimport j8plus.types.Either;\n\nfinal Maybe<Integer> num = Maybe.maybe(1);\nEither.fromMaybe(num, () -> "No number found");\n// Either<String, Integer> = Right(1)\n\nfinal Maybe<Integer> noNum = Maybe.nothing();\nEither.fromMaybe(noNum, () -> "No number found");\n// Either<String, Integer> = Left("No number found")\n')),(0,i.kt)("h2",{id:"transform"},"Transform"),(0,i.kt)("h3",{id:"eithermap"},(0,i.kt)("inlineCode",{parentName:"h3"},"Either.map")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"import j8plus.types.Either;\n\nfinal Either<String, Integer> errorOrNumber = Either.right(5);\n// Either<String, Integer> = Right(5)\n\nerrorOrNumber.map(n -> n * 2);\n// Either<String, Integer> = Right(10)\n")),(0,i.kt)("h3",{id:"eitherflatmap"},(0,i.kt)("inlineCode",{parentName:"h3"},"Either.flatMap")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'import j8plus.types.Either;\n\npublic Either<String, Integer> foo(int n) {\n  if (n < 0) {\n    return Either.left(\n      "foo can\'t take a negative int. [n: " + n + "]"\n    );\n  } else {\n    return Either.right(n * 2);\n  }\n}\n\npublic Either<String, Integer> bar(int n) {\n  if (n < 100) {\n    return Either.left(\n      "bar can\'t take an int less than 100. [n: " + n + "]"\n    );\n  } else {\n    return Either.right(n - 100);\n  }\n}\n')),(0,i.kt)("p",null,"All happy paths"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"Either.<String, Integer>right(50) // Either<String, Integer> = Right(50)\n  .flatMap(n -> foo(n))           // Either<String, Integer> = Right(100)\n  .flatMap(n -> bar(n))           // Either<String, Integer> = Right(0)\n// Or with method references\nEither.<String, Integer>right(50) // Either<String, Integer> = Right(50)\n  .flatMap(this::foo)             // Either<String, Integer> = Right(100)\n  .flatMap(this::bar)             // Either<String, Integer> = Right(0)\n")),(0,i.kt)("p",null,"Unhappy path cases"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'Either.<String, Integer>right(-1) // Either<String, Integer> = Right(-1)\n  .flatMap(n -> foo(n))           // Either<String, Integer> = Left("foo can\'t take a negative int. [n: -1]")\n  .flatMap(n -> bar(n));          // Either<String, Integer> = Left("foo can\'t take a negative int. [n: -1]")\n \n// Or with method references\nEither.<String, Integer>right(-1) // Either<String, Integer> = Right(-1)\n  .flatMap(this::foo)             // Either<String, Integer> = Left("foo can\'t take a negative int. [n: -1]")\n  .flatMap(this::bar);            // Either<String, Integer> = Left("foo can\'t take a negative int. [n: -1]")\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'Either.<String, Integer>right(5) // Either<String, Integer> = Right(5)\n  .flatMap(n -> foo(n))          // Either<String, Integer> = Right(10)\n  .flatMap(n -> bar(n));         // Either<String, Integer> = Left("bar can\'t take an int less than 100. [n: 10]")\n \n// Or with method references\nEither.<String, Integer>right(5) // Either<String, Integer> = Right(5)\n  .flatMap(this::foo)            // Either<String, Integer> = Right(10)\n  .flatMap(this::bar);           // Either<String, Integer> = Left("bar can\'t take an int less than 100. [n: 10]")\n')),(0,i.kt)("h3",{id:"eitherleftmap"},(0,i.kt)("inlineCode",{parentName:"h3"},"Either.leftMap")),(0,i.kt)("p",null,"If you want to change the left value, you can use ",(0,i.kt)("inlineCode",{parentName:"p"},"map")," to do it."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'import j8plus.types.Either;\n\npublic class MyError {\n  public final String message;\n  public MyError(final String message) {\n    this.message = message;\n  }\n  \n  @Override\n  public String toString() {\n    return "MyError(message=" + message + ")";\n  }\n}\n\nfinal Either<String, Integer> errorMsgOrNum = Either.left("Error message");\n// Either<String, Integer> = Left(Error message)\n\nerrorMsgOrNum.leftMap(err -> new MyError(err));\n// Either<MyError, Integer> = Left(MyError(message=Error message))\n')),(0,i.kt)("h3",{id:"eitherleftflatmap"},(0,i.kt)("inlineCode",{parentName:"h3"},"Either.leftFlatMap")),(0,i.kt)("p",null,"Would you like to place the ",(0,i.kt)("inlineCode",{parentName:"p"},"Left")," value with another ",(0,i.kt)("inlineCode",{parentName:"p"},"Either")," which can be another ",(0,i.kt)("inlineCode",{parentName:"p"},"Left")," or even ",(0,i.kt)("inlineCode",{parentName:"p"},"Right"),"? You can use ",(0,i.kt)("inlineCode",{parentName:"p"},"leftFlatMap"),"."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Left")," to ",(0,i.kt)("inlineCode",{parentName:"p"},"Right")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'import j8plus.types.Either;\n\nfinal Either<String, Integer> errorMsgOrNum = Either.left("Error message");\n// Either<String, Integer> = Left(Error message)\n\nerrorMsgOrNum.leftFlatMap(err -> Either.right(0));\n// Either<String, Integer> = Right(0)\n')),(0,i.kt)("p",null,"Or it can be another ",(0,i.kt)("inlineCode",{parentName:"p"},"Left")," like"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'import j8plus.types.Either;\n\npublic class MyError {\n  public final String message;\n  public MyError(final String message) {\n    this.message = message;\n  }\n\n  @Override\n  public String toString() {\n    return "MyError(message=" + message + ")";\n  }\n}\n\nfinal Either<String, Integer> errorMsgOrNum = Either.left("Error message");\n// Either<String, Integer> = Left(Error message)\n\nerrorMsgOrNum.leftFlatMap(err -> Either.left(new MyError(err)));\n// Either<MyError, Integer> = Left(MyError(message=Error message))\n')),(0,i.kt)("h3",{id:"eitherswap"},(0,i.kt)("inlineCode",{parentName:"h3"},"Either.swap")),(0,i.kt)("p",null,"If you want to swap ",(0,i.kt)("inlineCode",{parentName:"p"},"Left")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"Right"),"? You can use ",(0,i.kt)("inlineCode",{parentName:"p"},"Either.swap()"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"import j8plus.types.Either;\n\nfinal Either<String, Integer> errorMsgOrNum = Either.right(1);\n// Either<String, Integer> = Right(1)\n\nerrorMsgOrNum.swap();\n// Either<Integer, String> = Left(1)\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'import j8plus.types.Either;\n\nfinal Either<String, Integer> errorMsgOrNum = Either.left("Error message");\n// Either<String, Integer> = Left(Error message)\n\nerrorMsgOrNum.swap();\n// Either<Integer, String> = Right(Error message)\n')),(0,i.kt)("h2",{id:"get-the-value"},"Get the Value"),(0,i.kt)("h3",{id:"eitherfold"},(0,i.kt)("inlineCode",{parentName:"h3"},"Either.fold")),(0,i.kt)("p",null,"If you want to get the value inside ",(0,i.kt)("inlineCode",{parentName:"p"},"Either"),", you can use ",(0,i.kt)("inlineCode",{parentName:"p"},"Either.fold"),". Since you can have only one result type, you have to provide ways to turn a type in ",(0,i.kt)("inlineCode",{parentName:"p"},"Right")," and a type in ",(0,i.kt)("inlineCode",{parentName:"p"},"Left")," into one result type. So ",(0,i.kt)("inlineCode",{parentName:"p"},"fold")," takes two functions. One for the ",(0,i.kt)("inlineCode",{parentName:"p"},"Right")," case and the other for the ",(0,i.kt)("inlineCode",{parentName:"p"},"Left")," case."),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"Right")," case,"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"import j8plus.types.Either;\n\nfinal Either<String, Integer> errorMsgOrNum = Either.right(999);\n// Either<String, Integer> = Right(999)\n\nerrorMsgOrNum.fold(err -> 0, n -> n);\n// Integer = 999\n\n// Or using the identity function from java.util.function.Function\nimport java.util.function.Function;\n\nerrorMsgOrNum.fold(err -> 0, Function.identity());\n// Integer = 999\n")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"Left")," case,"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'import j8plus.types.Either;\n\nfinal Either<String, Integer> errorMsgOrNum = Either.left("Error message");\n// Either<String, Integer> = Left(Error message)\n\nerrorMsgOrNum.fold(err -> 0, n -> n);\n// Integer = 0\n')),(0,i.kt)("p",null,"You can also turn the value into a completely different type."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"import j8plus.types.Either;\nimport java.time.Instant;\n\nfinal Either<String, Long> errorMsgOrMillis = Either.right(1638316800000L);\n// Either<String, Long> = Right(1638316800000L)\n\nerrorMsgOrMillis.fold(err -> Instant.now(), millis -> Instant.ofEpochMilli(millis));\n// Instant = 2021-12-01T00:00:00Z\n\n// Or using method reference  \nerrorMsgOrMillis.fold(err -> Instant.now(), Instant::ofEpochMilli);\n// Instant = 2021-12-01T00:00:00Z\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'import j8plus.types.Either;\nimport java.time.Instant;\n\nfinal Either<String, Long> errorMsgOrMillis = Either.left("Error message");\n// Either<String, Long> = Left(Error message)\n\nerrorMsgOrMillis.fold(err -> Instant.now(), millis -> Instant.ofEpochMilli(millis));\n// Instant = 2021-12-30T09:15:24.033117Z\n')),(0,i.kt)("h3",{id:"eithergetorelse"},(0,i.kt)("inlineCode",{parentName:"h3"},"Either.getOrElse")),(0,i.kt)("p",null,"To get the ",(0,i.kt)("inlineCode",{parentName:"p"},"Right")," value, you can use ",(0,i.kt)("inlineCode",{parentName:"p"},"getOrElse(Supplier<AlternativeValue>)"),". If the ",(0,i.kt)("inlineCode",{parentName:"p"},"Either")," is ",(0,i.kt)("inlineCode",{parentName:"p"},"Left"),", it returns the given alternative from the supplier param."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Right")," case,"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"import j8plus.types.Either;\n\nfinal Either<String, Integer> errorMsgOrNum = Either.right(999);\n// Either<String, Integer> = Right(999)\n\nerrorMsgOrNum.getOrElse(() -> 0);\n// Integer = 999\n")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Left")," case,"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'import j8plus.types.Either;\n\nfinal Either<String, Integer> errorMsgOrNum = Either.left("Error message");\n// Either<String, Integer> = Left(Error message)\n\nerrorMsgOrNum.getOrElse(() -> 0);\n// Integer = 0\n')),(0,i.kt)("h3",{id:"eithergetleftorelse"},(0,i.kt)("inlineCode",{parentName:"h3"},"Either.getLeftOrElse")),(0,i.kt)("p",null,"To get the ",(0,i.kt)("inlineCode",{parentName:"p"},"Left")," value, you can use ",(0,i.kt)("inlineCode",{parentName:"p"},"getLeftOrElse(Supplier<AlternativeValue>)"),". If the ",(0,i.kt)("inlineCode",{parentName:"p"},"Either")," is ",(0,i.kt)("inlineCode",{parentName:"p"},"Right"),", it returns the given alternative from the supplier param."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Right")," case,"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'import j8plus.types.Either;\n\nfinal Either<String, Integer> errorMsgOrNum = Either.right(999);\n// Either<String, Integer> = Right(999)\n\nerrorMsgOrNum.getLeftOrElse(() -> "Default");\n// String = Default\n')),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Left")," case,"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'import j8plus.types.Either;\n\nfinal Either<String, Integer> errorMsgOrNum = Either.left("Error message");\n// Either<String, Integer> = Left(Error message)\n\nerrorMsgOrNum.getLeftOrElse(() -> "Default");\n// String = Error message\n')),(0,i.kt)("h2",{id:"use-value"},"Use Value"),(0,i.kt)("h3",{id:"eitherforeach"},(0,i.kt)("inlineCode",{parentName:"h3"},"Either.forEach")),(0,i.kt)("p",null,"If you want to use the ",(0,i.kt)("inlineCode",{parentName:"p"},"Right")," value and don't need to return anything, you can use ",(0,i.kt)("inlineCode",{parentName:"p"},"forEach"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'import j8plus.types.Either;\n\nfinal Either<String, Integer> errorMsgOrNum = Either.right(999);\n// Either<String, Integer> = Right(999)\n\nerrorMsgOrNum.forEach(n -> System.out.println("The value is " + n));\n// The value is 999\n')),(0,i.kt)("h3",{id:"eitherforeachleft"},(0,i.kt)("inlineCode",{parentName:"h3"},"Either.forEachLeft")),(0,i.kt)("p",null,"If you want to use the ",(0,i.kt)("inlineCode",{parentName:"p"},"Left")," value and don't need to return anything, you can use ",(0,i.kt)("inlineCode",{parentName:"p"},"forEachLeft"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'import j8plus.types.Either;\n\nfinal Either<String, Integer> errorMsgOrNum = Either.left("Error message");\n// Either<String, Integer> = Left(Error message)\n\nerrorMsgOrNum.forEachLeft(err -> System.out.println("ERROR: " + err));\n// ERROR: Error message\n')),(0,i.kt)("h2",{id:"check-value-in-either"},"Check Value in Either"),(0,i.kt)("p",null,"If you want to chekc if ",(0,i.kt)("inlineCode",{parentName:"p"},"Either")," is ",(0,i.kt)("inlineCode",{parentName:"p"},"Right")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"Left"),", you can use ",(0,i.kt)("inlineCode",{parentName:"p"},"isRight()")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"isLeft()")," respectively."),(0,i.kt)("h3",{id:"eitherisright"},(0,i.kt)("inlineCode",{parentName:"h3"},"Either.isRight")),(0,i.kt)("p",null,"To check if the ",(0,i.kt)("inlineCode",{parentName:"p"},"Either")," is ",(0,i.kt)("inlineCode",{parentName:"p"},"Right"),", use ",(0,i.kt)("inlineCode",{parentName:"p"},"isRight()"),","),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'import j8plus.types.Either;\n\nfinal Either<String, Integer> errorMsgOrNum = Either.right(999);\n// Either<String, Integer> = Right(999)\n\nerrorMsgOrNum.isRight();\n// boolean = true\n\nfinal Either<String, Integer> errorMsgOrNum2 = Either.left("Error message");\n// Either<String, Integer> = Left(Error message)\n\nerrorMsgOrNum2.isRight();\n// boolean = false\n')),(0,i.kt)("h3",{id:"eitherisleft"},(0,i.kt)("inlineCode",{parentName:"h3"},"Either.isLeft")),(0,i.kt)("p",null,"To check if the ",(0,i.kt)("inlineCode",{parentName:"p"},"Either")," is ",(0,i.kt)("inlineCode",{parentName:"p"},"Left"),", use ",(0,i.kt)("inlineCode",{parentName:"p"},"isLeft()"),","),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'import j8plus.types.Either;\n\nfinal Either<String, Integer> errorMsgOrNum = Either.right(999);\n// Either<String, Integer> = Right(999)\n\nerrorMsgOrNum.isLeft();\n// boolean = false\n\nfinal Either<String, Integer> errorMsgOrNum2 = Either.left("Error message");\n// Either<String, Integer> = Left(Error message)\n\nerrorMsgOrNum2.isLeft();\n// boolean = true\n')),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'import j8plus.types.Either;\n\npublic class DivisionByZeroError {\n  public final int dividend;\n  \n  public DivisionByZeroError(final int dividend) {\n    this.dividend = dividend;\n  }\n  \n  public String getMessage() {\n    return "Arithmetic error: dividing " + dividend + " by zero is not possible.";\n  }\n\n  @Override\n  public String toString() {\n    return new StringBuilder("DivisionByZeroError(")\n      .append("dividend=").append(dividend)\n      .append(\')\')\n      .toString();\n  }\n}\n\npublic Either<DivisionByZeroError, Integer> divide(int a, int b) {\n  if (b == 0) {\n    return Either.left(new DivisionByZeroError(a));\n  } else {\n    return Either.right(a / b);\n  }\n}\n\nfinal var result1 = divide(10, 2);\n// Either<DivisionByZeroError, Integer> = Right(5)\n\nfinal var result2 = divide(10, 0);\n// Either<DivisionByZeroError, Integer> = Left(DivisionByZeroError(dividend=10))\n')))}g.isMDXComponent=!0}}]);