"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[141],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return f}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var p=r.createContext({}),c=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},u=function(e){var n=c(e.components);return r.createElement(p.Provider,{value:n},e.children)},s={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),m=c(t),f=a,d=m["".concat(p,".").concat(f)]||m[f]||s[f]||i;return t?r.createElement(d,l(l({ref:n},u),{},{components:t})):r.createElement(d,l({ref:n},u))}));function f(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,l=new Array(i);l[0]=m;var o={};for(var p in n)hasOwnProperty.call(n,p)&&(o[p]=n[p]);o.originalType=e,o.mdxType="string"==typeof e?e:a,l[1]=o;for(var c=2;c<i;c++)l[c]=t[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},2344:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return o},contentTitle:function(){return p},metadata:function(){return c},toc:function(){return u},default:function(){return m}});var r=t(7462),a=t(3366),i=(t(7294),t(3905)),l=["components"],o={id:"recursion",title:"Recursion",sidebar_label:"Recursion"},p=void 0,c={unversionedId:"fp/recursion",id:"fp/recursion",isDocsHomePage:!1,title:"Recursion",description:"Recursion Causes Stack Overflow",source:"@site/docs/fp/recursion.md",sourceDirName:"fp",slug:"/fp/recursion",permalink:"/docs/fp/recursion",tags:[],version:"current",frontMatter:{id:"recursion",title:"Recursion",sidebar_label:"Recursion"},sidebar:"j8PlusSidebar",previous:{title:"Functional Programming (WIP)",permalink:"/docs/fp/"},next:{title:"Currying (WIP)",permalink:"/docs/fp/currying"}},u=[{value:"Recursion Causes Stack Overflow",id:"recursion-causes-stack-overflow",children:[]},{value:"No Stack Overflow with Trampoline",id:"no-stack-overflow-with-trampoline",children:[]}],s={toc:u};function m(e){var n=e.components,t=(0,a.Z)(e,l);return(0,i.kt)("wrapper",(0,r.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"recursion-causes-stack-overflow"},"Recursion Causes Stack Overflow"),(0,i.kt)("p",null,"JVMs of Java 8 and higher still don't support ",(0,i.kt)("a",{parentName:"p",href:"http://en.wikipedia.org/wiki/Tail_call"},"tail call optimization"),". So if you write a recursive method like the following one, you still get ",(0,i.kt)("a",{parentName:"p",href:"http://docs.oracle.com/javase/8/docs/api/java/lang/StackOverflowError.html"},"StackOverflowError"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"public class App {\n  public static Long termial(final Long n, final Long acc) {\n    if (n >= 1) {\n      return termial(n - 1, acc + n);\n    } else {\n      return acc;\n    }\n  }\n\n  public static void main(final String[] args) {\n    System.out.println(termial(100000L, 0L));\n  }\n}\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'Exception in thread "main" java.lang.StackOverflowError\n    at App.termial(App.java:4)\n    at App.termial(App.java:4)\n    at App.termial(App.java:4)\n    at App.termial(App.java:4)\n    at App.termial(App.java:4)\n    at App.termial(App.java:4)\n    at App.termial(App.java:4)\n...\n')),(0,i.kt)("h2",{id:"no-stack-overflow-with-trampoline"},"No Stack Overflow with Trampoline"),(0,i.kt)("p",null,"It can be solved using ",(0,i.kt)("inlineCode",{parentName:"p"},"TailCalls.trampoline()")," with small changes in the original method."),(0,i.kt)("p",null,"Changes required:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"In the original method, put the return type in the type parameter of ",(0,i.kt)("inlineCode",{parentName:"p"},"TailCallable"),"."),(0,i.kt)("p",{parentName:"li"},"e.g.) ",(0,i.kt)("inlineCode",{parentName:"p"},"Long")," => ",(0,i.kt)("inlineCode",{parentName:"p"},"TailCallable<Long>"),".")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"When it's the end case, return the value with ",(0,i.kt)("inlineCode",{parentName:"p"},"TailCalls.done()")," method."),(0,i.kt)("p",{parentName:"li"},"e.g.) ",(0,i.kt)("inlineCode",{parentName:"p"},"return acc;")," => ",(0,i.kt)("inlineCode",{parentName:"p"},"return TailCalls.done(acc);"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Use a lambda expression for supplier for the recursive method call."),(0,i.kt)("p",{parentName:"li"},"e.g.) ",(0,i.kt)("inlineCode",{parentName:"p"},"return termial(n - 1, acc + n);")," => ",(0,i.kt)("inlineCode",{parentName:"p"},"return () -> termial(n - 1, acc + n);")))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"import j8plus.recursion.TailCallable;\nimport static j8plus.recursion.TailCalls.*;\n\npublic class App {\n  public static TailCallable<Long> termial(final Long n, final Long acc) {\n    if (n >= 1) {\n      return () -> termial(n - 1, acc + n);\n    } else {\n      return done(acc);\n    }\n  }\n\n  public static void main(final String[] args) {\n    System.out.println(trampoline(termial(100000L, 0L)));\n    // 5000050000L\n  }\n}\n")))}m.isMDXComponent=!0}}]);