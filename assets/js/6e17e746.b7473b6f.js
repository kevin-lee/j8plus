"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[787],{3905:function(e,n,t){t.d(n,{Zo:function(){return y},kt:function(){return u}});var a=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var p=a.createContext({}),s=function(e){var n=a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},y=function(e){var n=s(e.components);return a.createElement(p.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,p=e.parentName,y=o(e,["components","mdxType","originalType","parentName"]),d=s(t),u=i,b=d["".concat(p,".").concat(u)]||d[u]||m[u]||r;return t?a.createElement(b,l(l({ref:n},y),{},{components:t})):a.createElement(b,l({ref:n},y))}));function u(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=t.length,l=new Array(r);l[0]=d;var o={};for(var p in n)hasOwnProperty.call(n,p)&&(o[p]=n[p]);o.originalType=e,o.mdxType="string"==typeof e?e:i,l[1]=o;for(var s=2;s<r;s++)l[s]=t[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},588:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return o},contentTitle:function(){return p},metadata:function(){return s},toc:function(){return y},default:function(){return d}});var a=t(7462),i=t(3366),r=(t(7294),t(3905)),l=["components"],o={id:"maybe",title:"Maybe - A Better Optional",sidebar_label:"Maybe"},p=void 0,s={unversionedId:"types/maybe",id:"types/maybe",isDocsHomePage:!1,title:"Maybe - A Better Optional",description:"Why Maybe",source:"@site/docs/types/maybe.md",sourceDirName:"types",slug:"/types/maybe",permalink:"/docs/types/maybe",tags:[],version:"current",frontMatter:{id:"maybe",title:"Maybe - A Better Optional",sidebar_label:"Maybe"},sidebar:"j8PlusSidebar",previous:{title:"Types",permalink:"/docs/types/"},next:{title:"Either (WIP)",permalink:"/docs/types/either"}},y=[{value:"Why <code>Maybe</code>",id:"why-maybe",children:[]},{value:"Create",id:"create",children:[{value:"<code>Maybe.maybe()</code>",id:"maybemaybe",children:[]},{value:"<code>Maybe.nothing()</code>",id:"maybenothing",children:[]},{value:"<code>Maybe</code> from <code>Optional</code>",id:"maybe-from-optional",children:[]},{value:"<code>Maybe</code> to <code>Optional</code>",id:"maybe-to-optional",children:[]}]},{value:"Transform",id:"transform",children:[{value:"<code>Maybe.map()</code>",id:"maybemap",children:[]},{value:"<code>Maybe.flatMap()</code>",id:"maybeflatmap",children:[]},{value:"<code>Maybe.filter()</code>",id:"maybefilter",children:[]}]},{value:"Get the Value",id:"get-the-value",children:[{value:"<code>Maybe.fold()</code>",id:"maybefold",children:[]},{value:"<code>Maybe.getOrElse()</code>",id:"maybegetorelse",children:[]}]},{value:"Check Maybe Type",id:"check-maybe-type",children:[{value:"<code>Maybe.isJust()</code>",id:"maybeisjust",children:[]},{value:"<code>Maybe.isNothing()</code>",id:"maybeisnothing",children:[]}]}],m={toc:y};function d(e){var n=e.components,t=(0,i.Z)(e,l);return(0,r.kt)("wrapper",(0,a.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"why-maybe"},"Why ",(0,r.kt)("inlineCode",{parentName:"h2"},"Maybe")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Maybe")," is an alternative to Java's ",(0,r.kt)("inlineCode",{parentName:"p"},"Optional"),". Java has ",(0,r.kt)("inlineCode",{parentName:"p"},"Optional")," then why do we need ",(0,r.kt)("inlineCode",{parentName:"p"},"Maybe"),"?"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"First of all, Java's ",(0,r.kt)("inlineCode",{parentName:"li"},"Optional")," is not ",(0,r.kt)("inlineCode",{parentName:"li"},"Serializable"),". When it was added to Java 8, the designers of the language didn't want us to use it as a type for the object member variables."),(0,r.kt)("li",{parentName:"ul"},"Java's ",(0,r.kt)("inlineCode",{parentName:"li"},"Optional")," has the ",(0,r.kt)("inlineCode",{parentName:"li"},"get()")," method which means it may throw an exception if ",(0,r.kt)("inlineCode",{parentName:"li"},"Optional.isPresent()")," is ",(0,r.kt)("inlineCode",{parentName:"li"},"false"),".")),(0,r.kt)("h2",{id:"create"},"Create"),(0,r.kt)("h3",{id:"maybemaybe"},(0,r.kt)("inlineCode",{parentName:"h3"},"Maybe.maybe()")),(0,r.kt)("p",null,"To construct ",(0,r.kt)("inlineCode",{parentName:"p"},"Maybe"),", use ",(0,r.kt)("inlineCode",{parentName:"p"},"Maybe.maybe"),". If the given argument is ",(0,r.kt)("inlineCode",{parentName:"p"},"null"),", it creates ",(0,r.kt)("inlineCode",{parentName:"p"},"Nothing"),", otherwise it's ",(0,r.kt)("inlineCode",{parentName:"p"},"Just")," with the given value."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"import j8plus.types.Maybe;\n\nMaybe.maybe(123);\n// Maybe<Integer> = Just(123)\n\nMaybe.maybe(null);\n// Maybe = Nothing\n")),(0,r.kt)("h3",{id:"maybenothing"},(0,r.kt)("inlineCode",{parentName:"h3"},"Maybe.nothing()")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"import j8plus.types.Maybe;\n\nMaybe.nothing();\n// Maybe = Nothing\n")),(0,r.kt)("h3",{id:"maybe-from-optional"},(0,r.kt)("inlineCode",{parentName:"h3"},"Maybe")," from ",(0,r.kt)("inlineCode",{parentName:"h3"},"Optional")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'import j8plus.types.Maybe;\n\nfinal Optional<String> optionalName = Optional.ofNullable("Kevin");\n// Optional[Kevin]\n\n// ...\nfinal Maybe<String> maybeName = Maybe.fromOptional(optionalName);\n// Maybe<String> = Just(Kevin)\n')),(0,r.kt)("h3",{id:"maybe-to-optional"},(0,r.kt)("inlineCode",{parentName:"h3"},"Maybe")," to ",(0,r.kt)("inlineCode",{parentName:"h3"},"Optional")),(0,r.kt)("p",null,"If you need to convert ",(0,r.kt)("inlineCode",{parentName:"p"},"Maybe")," into ",(0,r.kt)("inlineCode",{parentName:"p"},"Optional"),", you can do it with ",(0,r.kt)("inlineCode",{parentName:"p"},"Maybe.toOptional()"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"import j8plus.types.Maybe;\n\nMaybe.maybe(1).toOptional(); // Optional[1]\nMaybe.nothing().toOptional(); // Optional.empty\n")),(0,r.kt)("h2",{id:"transform"},"Transform"),(0,r.kt)("h3",{id:"maybemap"},(0,r.kt)("inlineCode",{parentName:"h3"},"Maybe.map()")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"import j8plus.types.Maybe;\n\nMaybe.maybe(1).map(n -> n * 2); // Maybe<Integer> = Just(2)\n")),(0,r.kt)("h3",{id:"maybeflatmap"},(0,r.kt)("inlineCode",{parentName:"h3"},"Maybe.flatMap()")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"import j8plus.types.Maybe;\n\npublic Maybe<User> findUser(final Long id) \n\n// ...\n\nfinal Maybe<User> maybeUser = findUser(1L);\n// Maybe<User> = Just(User(1L, Kevin, Maybe<String> = Just(kevin@blah.blah)))\nmaybeUser.flatMap(user -> user.getEmail()); // Maybe<String> = Just(kevin@blah.blah)\n\nfinal Maybe<User> maybeUser2 = findUser(2L);\n// Maybe<User> = Just(User(2L, John, Maybe = Nothing))\nmaybeUser2.flatMap(user -> user.getEmail()); // Maybe = Nothing\n")),(0,r.kt)("h3",{id:"maybefilter"},(0,r.kt)("inlineCode",{parentName:"h3"},"Maybe.filter()")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Maybe.filter()")," can check if the value in ",(0,r.kt)("inlineCode",{parentName:"p"},"Maybe.Just")," matches the given ",(0,r.kt)("inlineCode",{parentName:"p"},"Predicate")," and if so, it keeps ",(0,r.kt)("inlineCode",{parentName:"p"},"Maybe.Just")," as is. If not, it turns it into ",(0,r.kt)("inlineCode",{parentName:"p"},"Maybe.Nothing"),".\nIf the ",(0,r.kt)("inlineCode",{parentName:"p"},"Maybe")," is already ",(0,r.kt)("inlineCode",{parentName:"p"},"Maybe.Nothing"),", nothing happens, and it is still ",(0,r.kt)("inlineCode",{parentName:"p"},"Maybe.Nothing"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"import j8plus.types.Maybe;\n\nMaybe.maybe(10).filter(n -> n > 9);\n// Maybe<Integer> = Just(10)\n\nMaybe.maybe(8).filter(n -> n > 9);\n// Maybe = Nothing\n")),(0,r.kt)("h2",{id:"get-the-value"},"Get the Value"),(0,r.kt)("h3",{id:"maybefold"},(0,r.kt)("inlineCode",{parentName:"h3"},"Maybe.fold()")),(0,r.kt)("p",null,"So if ",(0,r.kt)("inlineCode",{parentName:"p"},"Optional.get()")," is dangerous because it throws ",(0,r.kt)("inlineCode",{parentName:"p"},"NoSuchElementException")," when ",(0,r.kt)("inlineCode",{parentName:"p"},"Optional")," has a ",(0,r.kt)("inlineCode",{parentName:"p"},"null")," value (i.e. ",(0,r.kt)("inlineCode",{parentName:"p"},"Optional.empty()"),"), what should I use?"),(0,r.kt)("p",null,"A better way is using ",(0,r.kt)("inlineCode",{parentName:"p"},"fold")," which is also called as 'Catemorphism' in functional programming."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Maybe.fold()")," takes two parameters. The first one is a ",(0,r.kt)("inlineCode",{parentName:"p"},"Supplier")," to get the alternative value when ",(0,r.kt)("inlineCode",{parentName:"p"},"Maybe")," is ",(0,r.kt)("inlineCode",{parentName:"p"},"Nothing"),". The other one is a ",(0,r.kt)("inlineCode",{parentName:"p"},"Function")," to handle the value when it is ",(0,r.kt)("inlineCode",{parentName:"p"},"Maybe.Just"),"."),(0,r.kt)("p",null,"e.g.)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"import j8plus.types.Maybe;\n\nMaybe.maybe(10)\n  .fold(\n    // Nothing case: When it's Nothing, returns 0.\n    () -> 0,\n    // Just case: When it's Just, return the value after applying this function.\n    n -> n * 5\n  ); // 50\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'import j8plus.types.Maybe;\n\nMaybe.maybe(1).fold(() -> 0, n -> n * 2); // 2\nMaybe.nothing().fold(() -> 0, n -> n * 2); // 0\n\nMaybe.maybe("Kevin").fold(() -> "", name -> "Hello " + name);\n// "Hello Kevin"\n\nMaybe.nothing().fold(() -> "", name -> "Hello " + name);\n// ""\n')),(0,r.kt)("p",null,"When it is ",(0,r.kt)("inlineCode",{parentName:"p"},"Maybe.Just"),", if you don't want to change the value but just want to get it, you can use ",(0,r.kt)("inlineCode",{parentName:"p"},"Function.identity()")," for the ",(0,r.kt)("inlineCode",{parentName:"p"},"Just")," case function."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"import java.util.function.Function;\nimport j8plus.types.Maybe;\n\nMaybe.maybe(123).fold(() -> 0, Function.identity()); // 123\nMaybe.nothing().fold(() -> 0, Function.identity()); // 0\n\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Maybe.fold()")," is the same as ",(0,r.kt)("inlineCode",{parentName:"p"},"Maybe.map().getOrElse()"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"import j8plus.types.Maybe;\n\nMaybe.maybe(1).fold(() -> 0, n -> n * 2); // 2\nMaybe.maybe(1).map(n -> n * 2).getOrElse(() -> 0); // 2\n\nMaybe.nothing().fold(() -> 0, n -> n * 2); // 0\nMaybe.nothing().map(n -> n * 2).getOrElse(() -> 0); // 0\n")),(0,r.kt)("h3",{id:"maybegetorelse"},(0,r.kt)("inlineCode",{parentName:"h3"},"Maybe.getOrElse()")),(0,r.kt)("p",null,"If you don't need to change the value in the ",(0,r.kt)("inlineCode",{parentName:"p"},"Maybe")," and just want to get it, you can use ",(0,r.kt)("inlineCode",{parentName:"p"},"Maybe.getOrElse()"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"import j8plus.types.Maybe;\n\nMaybe.maybe(1).getOrElse(() -> 0); // 1\nMaybe.nothing().getOrElse(() -> 0); // 0\n")),(0,r.kt)("h2",{id:"check-maybe-type"},"Check Maybe Type"),(0,r.kt)("h3",{id:"maybeisjust"},(0,r.kt)("inlineCode",{parentName:"h3"},"Maybe.isJust()")),(0,r.kt)("p",null,"To check if a ",(0,r.kt)("inlineCode",{parentName:"p"},"Maybe")," instance is ",(0,r.kt)("inlineCode",{parentName:"p"},"Maybe.Just"),", use ",(0,r.kt)("inlineCode",{parentName:"p"},"Maybe.isJust()"),". If ",(0,r.kt)("inlineCode",{parentName:"p"},"true"),", it is ",(0,r.kt)("inlineCode",{parentName:"p"},"Maybe.Just"),". If ",(0,r.kt)("inlineCode",{parentName:"p"},"false"),", it is ",(0,r.kt)("inlineCode",{parentName:"p"},"Maybe.Nothing"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"import j8plus.types.Maybe;\n\nMaybe.maybe(1).isJust(); // true\nMaybe.nothing().isJust(); // false\n")),(0,r.kt)("h3",{id:"maybeisnothing"},(0,r.kt)("inlineCode",{parentName:"h3"},"Maybe.isNothing()")),(0,r.kt)("p",null,"To check if a ",(0,r.kt)("inlineCode",{parentName:"p"},"Maybe")," instance is ",(0,r.kt)("inlineCode",{parentName:"p"},"Maybe.Nothing"),", use ",(0,r.kt)("inlineCode",{parentName:"p"},"Maybe.isNothing()"),". If ",(0,r.kt)("inlineCode",{parentName:"p"},"true"),", it is ",(0,r.kt)("inlineCode",{parentName:"p"},"Maybe.Nothing"),". If ",(0,r.kt)("inlineCode",{parentName:"p"},"false"),", it is ",(0,r.kt)("inlineCode",{parentName:"p"},"Maybe.Just"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"import j8plus.types.Maybe;\n\nMaybe.nothing().isNothing(); // true\nMaybe.maybe(1).isNothing(); // false\n")))}d.isMDXComponent=!0}}]);