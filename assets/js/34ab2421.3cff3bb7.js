"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[141],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>d});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),c=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},s=function(e){var t=c(e.components);return r.createElement(p.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),u=c(n),f=a,d=u["".concat(p,".").concat(f)]||u[f]||m[f]||i;return n?r.createElement(d,l(l({ref:t},s),{},{components:n})):r.createElement(d,l({ref:t},s))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=f;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o[u]="string"==typeof e?e:a,l[1]=o;for(var c=2;c<i;c++)l[c]=n[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},2344:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var r=n(7462),a=(n(7294),n(3905));const i={id:"recursion",title:"Recursion",sidebar_label:"Recursion"},l=void 0,o={unversionedId:"fp/recursion",id:"fp/recursion",title:"Recursion",description:"Recursion Causes Stack Overflow",source:"@site/docs/fp/recursion.md",sourceDirName:"fp",slug:"/fp/recursion",permalink:"/docs/fp/recursion",draft:!1,tags:[],version:"current",frontMatter:{id:"recursion",title:"Recursion",sidebar_label:"Recursion"},sidebar:"j8PlusSidebar",previous:{title:"Functional Programming (WIP)",permalink:"/docs/fp/"},next:{title:"Currying (WIP)",permalink:"/docs/fp/currying"}},p={},c=[{value:"Recursion Causes Stack Overflow",id:"recursion-causes-stack-overflow",level:2},{value:"No Stack Overflow with Trampoline",id:"no-stack-overflow-with-trampoline",level:2}],s={toc:c};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"recursion-causes-stack-overflow"},"Recursion Causes Stack Overflow"),(0,a.kt)("p",null,"JVMs of Java 8 and higher still don't support ",(0,a.kt)("a",{parentName:"p",href:"http://en.wikipedia.org/wiki/Tail_call"},"tail call optimization"),". So if you write a recursive method like the following one, you still get ",(0,a.kt)("a",{parentName:"p",href:"http://docs.oracle.com/javase/8/docs/api/java/lang/StackOverflowError.html"},"StackOverflowError"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"public class App {\n  public static Long termial(final Long n, final Long acc) {\n    if (n >= 1) {\n      return termial(n - 1, acc + n);\n    } else {\n      return acc;\n    }\n  }\n\n  public static void main(final String[] args) {\n    System.out.println(termial(100000L, 0L));\n  }\n}\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'Exception in thread "main" java.lang.StackOverflowError\n    at App.termial(App.java:4)\n    at App.termial(App.java:4)\n    at App.termial(App.java:4)\n    at App.termial(App.java:4)\n    at App.termial(App.java:4)\n    at App.termial(App.java:4)\n    at App.termial(App.java:4)\n...\n')),(0,a.kt)("h2",{id:"no-stack-overflow-with-trampoline"},"No Stack Overflow with Trampoline"),(0,a.kt)("p",null,"It can be solved using ",(0,a.kt)("inlineCode",{parentName:"p"},"TailCalls.trampoline()")," with small changes in the original method."),(0,a.kt)("p",null,"Changes required:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"In the original method, put the return type in the type parameter of ",(0,a.kt)("inlineCode",{parentName:"p"},"TailCallable"),"."),(0,a.kt)("p",{parentName:"li"},"e.g.) ",(0,a.kt)("inlineCode",{parentName:"p"},"Long")," => ",(0,a.kt)("inlineCode",{parentName:"p"},"TailCallable<Long>"),".")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"When it's the end case, return the value with ",(0,a.kt)("inlineCode",{parentName:"p"},"TailCalls.done()")," method."),(0,a.kt)("p",{parentName:"li"},"e.g.) ",(0,a.kt)("inlineCode",{parentName:"p"},"return acc;")," => ",(0,a.kt)("inlineCode",{parentName:"p"},"return TailCalls.done(acc);"))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Use a lambda expression for supplier for the recursive method call."),(0,a.kt)("p",{parentName:"li"},"e.g.) ",(0,a.kt)("inlineCode",{parentName:"p"},"return termial(n - 1, acc + n);")," => ",(0,a.kt)("inlineCode",{parentName:"p"},"return () -> termial(n - 1, acc + n);")))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"import j8plus.recursion.TailCallable;\nimport static j8plus.recursion.TailCalls.*;\n\npublic class App {\n  public static TailCallable<Long> termial(final Long n, final Long acc) {\n    if (n >= 1) {\n      return () -> termial(n - 1, acc + n);\n    } else {\n      return done(acc);\n    }\n  }\n\n  public static void main(final String[] args) {\n    System.out.println(trampoline(termial(100000L, 0L)));\n    // 5000050000L\n  }\n}\n")))}u.isMDXComponent=!0}}]);