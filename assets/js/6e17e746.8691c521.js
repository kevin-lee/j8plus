"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[787],{3905:(e,n,a)=>{a.d(n,{Zo:()=>y,kt:()=>u});var t=a(7294);function i(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function l(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function o(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?l(Object(a),!0).forEach((function(n){i(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function r(e,n){if(null==e)return{};var a,t,i=function(e,n){if(null==e)return{};var a,t,i={},l=Object.keys(e);for(t=0;t<l.length;t++)a=l[t],n.indexOf(a)>=0||(i[a]=e[a]);return i}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(t=0;t<l.length;t++)a=l[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var p=t.createContext({}),s=function(e){var n=t.useContext(p),a=n;return e&&(a="function"==typeof e?e(n):o(o({},n),e)),a},y=function(e){var n=s(e.components);return t.createElement(p.Provider,{value:n},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},b=t.forwardRef((function(e,n){var a=e.components,i=e.mdxType,l=e.originalType,p=e.parentName,y=r(e,["components","mdxType","originalType","parentName"]),m=s(a),b=i,u=m["".concat(p,".").concat(b)]||m[b]||d[b]||l;return a?t.createElement(u,o(o({ref:n},y),{},{components:a})):t.createElement(u,o({ref:n},y))}));function u(e,n){var a=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var l=a.length,o=new Array(l);o[0]=b;var r={};for(var p in n)hasOwnProperty.call(n,p)&&(r[p]=n[p]);r.originalType=e,r[m]="string"==typeof e?e:i,o[1]=r;for(var s=2;s<l;s++)o[s]=a[s];return t.createElement.apply(null,o)}return t.createElement.apply(null,a)}b.displayName="MDXCreateElement"},588:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>p,contentTitle:()=>o,default:()=>m,frontMatter:()=>l,metadata:()=>r,toc:()=>s});var t=a(7462),i=(a(7294),a(3905));const l={id:"maybe",title:"Maybe - A Better Optional",sidebar_label:"Maybe"},o=void 0,r={unversionedId:"types/maybe",id:"types/maybe",title:"Maybe - A Better Optional",description:"Why Maybe",source:"@site/docs/types/maybe.md",sourceDirName:"types",slug:"/types/maybe",permalink:"/docs/types/maybe",draft:!1,tags:[],version:"current",frontMatter:{id:"maybe",title:"Maybe - A Better Optional",sidebar_label:"Maybe"},sidebar:"j8PlusSidebar",previous:{title:"Types",permalink:"/docs/types/"},next:{title:"Either",permalink:"/docs/types/either"}},p={},s=[{value:"Why <code>Maybe</code>",id:"why-maybe",level:2},{value:"Create",id:"create",level:2},{value:"<code>Maybe.maybe()</code>",id:"maybemaybe",level:3},{value:"<code>Maybe.nothing()</code>",id:"maybenothing",level:3},{value:"<code>Maybe</code> from <code>Optional</code>",id:"maybe-from-optional",level:3},{value:"<code>Maybe</code> to <code>Optional</code>",id:"maybe-to-optional",level:3},{value:"Transform",id:"transform",level:2},{value:"<code>Maybe.map()</code>",id:"maybemap",level:3},{value:"<code>Maybe.flatMap()</code>",id:"maybeflatmap",level:3},{value:"<code>Maybe.filter()</code>",id:"maybefilter",level:3},{value:"Get the Value",id:"get-the-value",level:2},{value:"<code>Maybe.fold()</code>",id:"maybefold",level:3},{value:"<code>Maybe.getOrElse()</code>",id:"maybegetorelse",level:3},{value:"Check Maybe Type",id:"check-maybe-type",level:2},{value:"<code>Maybe.isJust()</code>",id:"maybeisjust",level:3},{value:"<code>Maybe.isNothing()</code>",id:"maybeisnothing",level:3}],y={toc:s};function m(e){let{components:n,...a}=e;return(0,i.kt)("wrapper",(0,t.Z)({},y,a,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"why-maybe"},"Why ",(0,i.kt)("inlineCode",{parentName:"h2"},"Maybe")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Maybe")," is an alternative to Java's ",(0,i.kt)("inlineCode",{parentName:"p"},"Optional"),". Java has ",(0,i.kt)("inlineCode",{parentName:"p"},"Optional")," then why do we need ",(0,i.kt)("inlineCode",{parentName:"p"},"Maybe"),"?"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"First of all, Java's ",(0,i.kt)("inlineCode",{parentName:"li"},"Optional")," is not ",(0,i.kt)("inlineCode",{parentName:"li"},"Serializable"),". When it was added to Java 8, the designers of the language didn't want us to use it as a type for the object member variables."),(0,i.kt)("li",{parentName:"ul"},"Java's ",(0,i.kt)("inlineCode",{parentName:"li"},"Optional")," has the ",(0,i.kt)("inlineCode",{parentName:"li"},"get()")," method which means it may throw an exception if ",(0,i.kt)("inlineCode",{parentName:"li"},"Optional.isPresent()")," is ",(0,i.kt)("inlineCode",{parentName:"li"},"false"),".")),(0,i.kt)("h2",{id:"create"},"Create"),(0,i.kt)("h3",{id:"maybemaybe"},(0,i.kt)("inlineCode",{parentName:"h3"},"Maybe.maybe()")),(0,i.kt)("p",null,"To construct ",(0,i.kt)("inlineCode",{parentName:"p"},"Maybe"),", use ",(0,i.kt)("inlineCode",{parentName:"p"},"Maybe.maybe"),". If the given argument is ",(0,i.kt)("inlineCode",{parentName:"p"},"null"),", it creates ",(0,i.kt)("inlineCode",{parentName:"p"},"Nothing"),", otherwise it's ",(0,i.kt)("inlineCode",{parentName:"p"},"Just")," with the given value."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"import j8plus.types.Maybe;\n\nMaybe.maybe(123);\n// Maybe<Integer> = Just(123)\n\nMaybe.maybe(null);\n// Maybe = Nothing\n")),(0,i.kt)("h3",{id:"maybenothing"},(0,i.kt)("inlineCode",{parentName:"h3"},"Maybe.nothing()")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"import j8plus.types.Maybe;\n\nMaybe.nothing();\n// Maybe = Nothing\n")),(0,i.kt)("h3",{id:"maybe-from-optional"},(0,i.kt)("inlineCode",{parentName:"h3"},"Maybe")," from ",(0,i.kt)("inlineCode",{parentName:"h3"},"Optional")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'import j8plus.types.Maybe;\n\nfinal Optional<String> optionalName = Optional.ofNullable("Kevin");\n// Optional[Kevin]\n\n// ...\nfinal Maybe<String> maybeName = Maybe.fromOptional(optionalName);\n// Maybe<String> = Just(Kevin)\n')),(0,i.kt)("h3",{id:"maybe-to-optional"},(0,i.kt)("inlineCode",{parentName:"h3"},"Maybe")," to ",(0,i.kt)("inlineCode",{parentName:"h3"},"Optional")),(0,i.kt)("p",null,"If you need to convert ",(0,i.kt)("inlineCode",{parentName:"p"},"Maybe")," into ",(0,i.kt)("inlineCode",{parentName:"p"},"Optional"),", you can do it with ",(0,i.kt)("inlineCode",{parentName:"p"},"Maybe.toOptional()"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"import j8plus.types.Maybe;\n\nMaybe.maybe(1).toOptional(); // Optional[1]\nMaybe.nothing().toOptional(); // Optional.empty\n")),(0,i.kt)("h2",{id:"transform"},"Transform"),(0,i.kt)("h3",{id:"maybemap"},(0,i.kt)("inlineCode",{parentName:"h3"},"Maybe.map()")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"import j8plus.types.Maybe;\n\nMaybe.maybe(1).map(n -> n * 2); // Maybe<Integer> = Just(2)\n")),(0,i.kt)("h3",{id:"maybeflatmap"},(0,i.kt)("inlineCode",{parentName:"h3"},"Maybe.flatMap()")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"import j8plus.types.Maybe;\n\npublic Maybe<User> findUser(final Long id) \n\n// ...\n\nfinal Maybe<User> maybeUser = findUser(1L);\n// Maybe<User> = Just(User(1L, Kevin, Maybe<String> = Just(kevin@blah.blah)))\nmaybeUser.flatMap(user -> user.getEmail()); // Maybe<String> = Just(kevin@blah.blah)\n\nfinal Maybe<User> maybeUser2 = findUser(2L);\n// Maybe<User> = Just(User(2L, John, Maybe = Nothing))\nmaybeUser2.flatMap(user -> user.getEmail()); // Maybe = Nothing\n")),(0,i.kt)("h3",{id:"maybefilter"},(0,i.kt)("inlineCode",{parentName:"h3"},"Maybe.filter()")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Maybe.filter()")," can check if the value in ",(0,i.kt)("inlineCode",{parentName:"p"},"Maybe.Just")," matches the given ",(0,i.kt)("inlineCode",{parentName:"p"},"Predicate")," and if so, it keeps ",(0,i.kt)("inlineCode",{parentName:"p"},"Maybe.Just")," as is. If not, it turns it into ",(0,i.kt)("inlineCode",{parentName:"p"},"Maybe.Nothing"),".\nIf the ",(0,i.kt)("inlineCode",{parentName:"p"},"Maybe")," is already ",(0,i.kt)("inlineCode",{parentName:"p"},"Maybe.Nothing"),", nothing happens, and it is still ",(0,i.kt)("inlineCode",{parentName:"p"},"Maybe.Nothing"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"import j8plus.types.Maybe;\n\nMaybe.maybe(10).filter(n -> n > 9);\n// Maybe<Integer> = Just(10)\n\nMaybe.maybe(8).filter(n -> n > 9);\n// Maybe = Nothing\n")),(0,i.kt)("h2",{id:"get-the-value"},"Get the Value"),(0,i.kt)("h3",{id:"maybefold"},(0,i.kt)("inlineCode",{parentName:"h3"},"Maybe.fold()")),(0,i.kt)("p",null,"So if ",(0,i.kt)("inlineCode",{parentName:"p"},"Optional.get()")," is dangerous because it throws ",(0,i.kt)("inlineCode",{parentName:"p"},"NoSuchElementException")," when ",(0,i.kt)("inlineCode",{parentName:"p"},"Optional")," has a ",(0,i.kt)("inlineCode",{parentName:"p"},"null")," value (i.e. ",(0,i.kt)("inlineCode",{parentName:"p"},"Optional.empty()"),"), what should I use?"),(0,i.kt)("p",null,"A better way is using ",(0,i.kt)("inlineCode",{parentName:"p"},"fold")," which is also called as 'Catemorphism' in functional programming."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Maybe.fold()")," takes two parameters. The first one is a ",(0,i.kt)("inlineCode",{parentName:"p"},"Supplier")," to get the alternative value when ",(0,i.kt)("inlineCode",{parentName:"p"},"Maybe")," is ",(0,i.kt)("inlineCode",{parentName:"p"},"Nothing"),". The other one is a ",(0,i.kt)("inlineCode",{parentName:"p"},"Function")," to handle the value when it is ",(0,i.kt)("inlineCode",{parentName:"p"},"Maybe.Just"),"."),(0,i.kt)("p",null,"e.g.)"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"import j8plus.types.Maybe;\n\nMaybe.maybe(10)\n  .fold(\n    // Nothing case: When it's Nothing, returns 0.\n    () -> 0,\n    // Just case: When it's Just, return the value after applying this function.\n    n -> n * 5\n  ); // 50\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'import j8plus.types.Maybe;\n\nMaybe.maybe(1).fold(() -> 0, n -> n * 2); // 2\nMaybe.nothing().fold(() -> 0, n -> n * 2); // 0\n\nMaybe.maybe("Kevin").fold(() -> "", name -> "Hello " + name);\n// "Hello Kevin"\n\nMaybe.nothing().fold(() -> "", name -> "Hello " + name);\n// ""\n')),(0,i.kt)("p",null,"When it is ",(0,i.kt)("inlineCode",{parentName:"p"},"Maybe.Just"),", if you don't want to change the value but just want to get it, you can use ",(0,i.kt)("inlineCode",{parentName:"p"},"Function.identity()")," for the ",(0,i.kt)("inlineCode",{parentName:"p"},"Just")," case function."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"import java.util.function.Function;\nimport j8plus.types.Maybe;\n\nMaybe.maybe(123).fold(() -> 0, Function.identity()); // 123\nMaybe.nothing().fold(() -> 0, Function.identity()); // 0\n\n")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Maybe.fold()")," is the same as ",(0,i.kt)("inlineCode",{parentName:"p"},"Maybe.map().getOrElse()"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"import j8plus.types.Maybe;\n\nMaybe.maybe(1).fold(() -> 0, n -> n * 2); // 2\nMaybe.maybe(1).map(n -> n * 2).getOrElse(() -> 0); // 2\n\nMaybe.nothing().fold(() -> 0, n -> n * 2); // 0\nMaybe.nothing().map(n -> n * 2).getOrElse(() -> 0); // 0\n")),(0,i.kt)("h3",{id:"maybegetorelse"},(0,i.kt)("inlineCode",{parentName:"h3"},"Maybe.getOrElse()")),(0,i.kt)("p",null,"If you don't need to change the value in the ",(0,i.kt)("inlineCode",{parentName:"p"},"Maybe")," and just want to get it, you can use ",(0,i.kt)("inlineCode",{parentName:"p"},"Maybe.getOrElse()"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"import j8plus.types.Maybe;\n\nMaybe.maybe(1).getOrElse(() -> 0); // 1\nMaybe.nothing().getOrElse(() -> 0); // 0\n")),(0,i.kt)("h2",{id:"check-maybe-type"},"Check Maybe Type"),(0,i.kt)("h3",{id:"maybeisjust"},(0,i.kt)("inlineCode",{parentName:"h3"},"Maybe.isJust()")),(0,i.kt)("p",null,"To check if a ",(0,i.kt)("inlineCode",{parentName:"p"},"Maybe")," instance is ",(0,i.kt)("inlineCode",{parentName:"p"},"Maybe.Just"),", use ",(0,i.kt)("inlineCode",{parentName:"p"},"Maybe.isJust()"),". If ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),", it is ",(0,i.kt)("inlineCode",{parentName:"p"},"Maybe.Just"),". If ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),", it is ",(0,i.kt)("inlineCode",{parentName:"p"},"Maybe.Nothing"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"import j8plus.types.Maybe;\n\nMaybe.maybe(1).isJust(); // true\nMaybe.nothing().isJust(); // false\n")),(0,i.kt)("h3",{id:"maybeisnothing"},(0,i.kt)("inlineCode",{parentName:"h3"},"Maybe.isNothing()")),(0,i.kt)("p",null,"To check if a ",(0,i.kt)("inlineCode",{parentName:"p"},"Maybe")," instance is ",(0,i.kt)("inlineCode",{parentName:"p"},"Maybe.Nothing"),", use ",(0,i.kt)("inlineCode",{parentName:"p"},"Maybe.isNothing()"),". If ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),", it is ",(0,i.kt)("inlineCode",{parentName:"p"},"Maybe.Nothing"),". If ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),", it is ",(0,i.kt)("inlineCode",{parentName:"p"},"Maybe.Just"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"import j8plus.types.Maybe;\n\nMaybe.nothing().isNothing(); // true\nMaybe.maybe(1).isNothing(); // false\n")))}m.isMDXComponent=!0}}]);